[{"/home/cmkrosp/workspace/TwiiterClone/src/index.js":"1","/home/cmkrosp/workspace/TwiiterClone/src/reportWebVitals.js":"2","/home/cmkrosp/workspace/TwiiterClone/src/components/App.js":"3","/home/cmkrosp/workspace/TwiiterClone/src/fbase.js":"4","/home/cmkrosp/workspace/TwiiterClone/src/components/Router.js":"5","/home/cmkrosp/workspace/TwiiterClone/src/routes/Home.js":"6","/home/cmkrosp/workspace/TwiiterClone/src/routes/Auth.js":"7","/home/cmkrosp/workspace/TwiiterClone/src/components/Navigation.js":"8","/home/cmkrosp/workspace/TwiiterClone/src/routes/Profile.js":"9","/home/cmkrosp/workspace/TwiiterClone/src/components/NweetFactory.js":"10","/home/cmkrosp/workspace/TwiiterClone/src/components/AuthForm.js":"11","/home/cmkrosp/workspace/TwiiterClone/src/components/Nweet.js":"12"},{"size":508,"mtime":1626779180764,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1626779180764,"results":"15","hashOfConfig":"14"},{"size":1055,"mtime":1626779180764,"results":"16","hashOfConfig":"14"},{"size":705,"mtime":1626781516044,"results":"17","hashOfConfig":"14"},{"size":1132,"mtime":1626779577233,"results":"18","hashOfConfig":"14"},{"size":855,"mtime":1627014965985,"results":"19","hashOfConfig":"14"},{"size":1356,"mtime":1627014960649,"results":"20","hashOfConfig":"14"},{"size":1090,"mtime":1626779180764,"results":"21","hashOfConfig":"14"},{"size":1627,"mtime":1627014975593,"results":"22","hashOfConfig":"14"},{"size":2760,"mtime":1626817218680,"results":"23","hashOfConfig":"14"},{"size":1896,"mtime":1626779180764,"results":"24","hashOfConfig":"14"},{"size":2115,"mtime":1626779180764,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"qkmopg",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},"/home/cmkrosp/workspace/TwiiterClone/src/index.js",[],"/home/cmkrosp/workspace/TwiiterClone/src/reportWebVitals.js",[],"/home/cmkrosp/workspace/TwiiterClone/src/components/App.js",[],"/home/cmkrosp/workspace/TwiiterClone/src/fbase.js",[],"/home/cmkrosp/workspace/TwiiterClone/src/components/Router.js",[],"/home/cmkrosp/workspace/TwiiterClone/src/routes/Home.js",[],"/home/cmkrosp/workspace/TwiiterClone/src/routes/Auth.js",[],"/home/cmkrosp/workspace/TwiiterClone/src/components/Navigation.js",[],"/home/cmkrosp/workspace/TwiiterClone/src/routes/Profile.js",[],"/home/cmkrosp/workspace/TwiiterClone/src/components/NweetFactory.js",["52"],"/home/cmkrosp/workspace/TwiiterClone/src/components/AuthForm.js",["53"],"import React, { useState } from \"react\";\nimport { authService } from \"fbase\";\nconst inputStyles = {};\n\nconst AuthForm = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [newAccount, setNewAccount] = useState(true);\n  const [error, setError] = useState(\"\");\n  const onChange = (event) => {\n    //구조 분해 할당\n    const {\n      target: { name, value },\n    } = event;\n    if (name === \"email\") {\n      setEmail(value);\n    } else if (name === \"password\") {\n      setPassword(value);\n    }\n  };\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      let data;\n      if (newAccount) {\n        data = await authService.createUserWithEmailAndPassword(\n          email,\n          password\n        );\n      } else {\n        data = await authService.signInWithEmailAndPassword(email, password);\n      }\n      console.log(data);\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n\n  const toggleAccount = () => setNewAccount((prev) => !prev);\n  return (\n    <>\n      <form onSubmit={onSubmit} className=\"container\">\n        <input\n          name=\"email\"\n          type=\"text\"\n          placeholder=\"이메일\"\n          required\n          value={email}\n          onChange={onChange}\n          className=\"authInput\"\n        />\n        <input\n          name=\"password\"\n          type=\"password\"\n          placeholder=\"비밀번호\"\n          required\n          value={password}\n          onChange={onChange}\n          className=\"authInput\"\n        />\n        <input\n          type=\"submit\"\n          value={newAccount ? \"계정 생성\" : \"로그인\"}\n          className=\"authInput authSubmit\"\n        />\n        {error}\n      </form>\n      <span onClick={toggleAccount} className=\"authSwitch\">\n        {newAccount ? \"로그인\" : \"계정 생성\"}\n      </span>\n    </>\n  );\n};\nexport default AuthForm;\n","/home/cmkrosp/workspace/TwiiterClone/src/components/Nweet.js",["54"],"import React, { useState } from \"react\";\nimport { dbService, storageService } from \"fbase\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Nweet = ({ nweetObj, isOwner }) => {\n  const [editing, setEditing] = useState(false);\n  const [newNweet, setNewNeet] = useState(nweetObj.text);\n  const onDeleteClick = async () => {\n    const ok = window.confirm(\"트윗을 삭제하시겠습니까?\");\n\n    if (ok) {\n      await dbService.doc(`nweets/${nweetObj.id}`).delete();\n      await storageService.refFromURL(nweetObj.attachmentUrl).delete();\n    }\n  };\n\n  const toggleEditing = () => setEditing((prev) => !prev);\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    await dbService.doc(`nweets/${nweetObj.id}`).update({\n      text: newNweet,\n    });\n    setEditing(false);\n  };\n\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setNewNeet(value);\n  };\n\n  return (\n    <div className=\"nweet\">\n      {editing ? (\n        <>\n          <form onSubmit={onSubmit} className=\"container nweetEdit\">\n            <input\n              onChange={onChange}\n              type=\"text\"\n              placeholde=\"수정할 내용을 적어주세요\"\n              value={newNweet}\n              required\n            />\n            <input type=\"submit\" value=\"업데이트 트윗\" className=\"formBtn\" />\n          </form>\n          <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\n            취소\n          </span>\n        </>\n      ) : (\n        <>\n          <h4>{nweetObj.text}</h4>\n          {nweetObj.attachmentUrl && <img src={nweetObj.attachmentUrl} />}\n          {isOwner && (\n            <div className=\"nweet__actions\">\n              <span onClick={onDeleteClick}>\n                <FontAwesomeIcon icon={faTrash} />\n              </span>\n              <span onClick={toggleEditing}>\n                <FontAwesomeIcon icon={faPencilAlt} />\n              </span>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Nweet;\n",{"ruleId":"55","severity":1,"message":"56","line":83,"column":11,"nodeType":"57","endLine":88,"endColumn":13},{"ruleId":"58","severity":1,"message":"59","line":3,"column":7,"nodeType":"60","messageId":"61","endLine":3,"endColumn":18},{"ruleId":"55","severity":1,"message":"56","line":56,"column":38,"nodeType":"57","endLine":56,"endColumn":74},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'inputStyles' is assigned a value but never used.","Identifier","unusedVar"]